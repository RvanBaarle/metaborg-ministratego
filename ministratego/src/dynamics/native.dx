module dynamics/native

imports
  dynamics/stdlib

rules
  builtins :: () -> Pluggable
  builtins() = @
  fix {
    fun $toplevelSucceed(term) =
      #print("OK") => tmp0;
      #print(term) => tmp1;
      #exit( )
    fun $toplevelFail( ) =
      #print("Fail") => tmp0;
      #exit( )
    fun $termEq(a, b, ifTrue, ifFalse) =
      #record-read(a, "type") => atype;
      #record-read(b, "type") => btype;
      if #str-neq(atype, btype) then
        ifFalse()
      else
        if #str-eq(atype, "STRING") then
          $termEqString(a, b, ifTrue, ifFalse)
        else
          if #str-eq(atype, "INT") then
            $termEqInt(a, b, ifTrue, ifFalse)
          else
            if #str-eq(atype, "LIST") then
              $termEqList(a, b, ifTrue, ifFalse)
            else
              $termEqCons(a, b, ifTrue, ifFalse)
    fun $termEqString(a, b, ifTrue, ifFalse) =
      #record-read(a, "value") => avalue;
      #record-read(b, "value") => bvalue;
      if #str-eq(avalue, bvalue) then
        ifTrue()
      else
        ifFalse()
    fun $termEqInt(a, b, ifTrue, ifFalse) =
      #record-read(a, "value") => avalue;
      #record-read(b, "value") => bvalue;
      if #int-eq(avalue, bvalue) then
        ifTrue()
      else
        ifFalse()
    fun $termEqCons(a, b, ifTrue, ifFalse) =
      #record-read(a, "name") => aname;
      #record-read(b, "name") => bname;
      if #str-neq(aname, bname) then
        ifFalse()
      else
        #record-read(a, "args") => aargs;
        #record-read(b, "args") => bargs;
        #array-length(aargs) => aarglen;
        #array-length(bargs) => barglen;
        if #int-eq(aarglen, barglen) then
          $termEqArray(aarglen, aargs, bargs, ifTrue, ifFalse)
        else
          ifFalse()
    fun $termEqList(a, b, ifTrue, ifFalse) =
      #record-read(a, "elements") => aargs;
      #record-read(b, "elements") => bargs;
      #array-length(aargs) => aarglen;
      #array-length(bargs) => barglen;
      if #int-eq(aarglen, barglen) then
        $termEqArray(aarglen, aargs, bargs, ifTrue, ifFalse)
      else
        ifFalse()
    fun $termEqArray(count, aargs, bargs, ifTrue, ifFalse) =
      if #int-eq(count, 0) then
        ifTrue()
      else
        #int-sub(count, 1) => i;
        fix {
          fun ifTrueRec() =
            $termEqArray(i, aargs, bargs, ifTrue, ifFalse)
        } in
          #array-read(aargs, i) => aval;
          #array-read(bargs, i) => bval;
          $termEq(aval, bval, ifTrueRec, ifFalse)   
                
    // evaluate `strat` on every element in list. For every element,
    // call onSucceed/onFail with the number of prior succeeded elements,
    // and a callback to continue evaluation. Call onFinish after finishing
    fun $strategyEvaluatorList(elements, strat, onSucceed, onFail, onFinish) =
      #array-length(elements) => len;
      fix {
        fun inner(i, succeeded) =
          if #int-eq(i, len) then
            onFinish(succeeded)
          else
            #int-add(i, 1) => inext;
            fix {
              fun runnextFail() = inner(inext, succeeded)
              fun runnextSucceed() =
                #int-add(succeeded, 1) => newsucc;
                inner(inext, newsucc)
            
              fun succeed(term) =
                #array-write(elements, i, term) => ignored;
                onSucceed(succeeded, runnextSucceed)
              
              fun fail() =
                onFail(succeeded, runnextFail)
            } in
              #array-read(elements, i) => el;
              strat(succeed, fail, el)
      } in
        inner(0, 0)
      
    // implementation of some(x)        
    fun $strategySome(onSucceed, onFail, term, strat) =
      #record-read(term, "type") => type;
      if #str-eq(type, "LIST") then
        $strategySomeList(onSucceed, onFail, term, strat)
      else
        if #str-eq(type, "CONS") then
          $strategySomeCons(onSucceed, onFail, term, strat)
        else
          onFail()
          
    // some(x) for lists
    fun $strategySomeList(onSucceed, onFail, term, strat) =
      #record-read(term, "elements") => els;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        fun goNext(ignored, next) = next()
        fun onFinish(n) =
          if #int-gt(n, 0) then
            #record-new("type", "LIST", "elements", copy) => newt;
            onSucceed(newt)
          else
            onFail()
      } in $strategyEvaluatorList(copy, strat, goNext, goNext, onFinish)
      
    // some(x) for constructors
    fun $strategySomeCons(onSucceed, onFail, term, strat) =
      #record-read(term, "args") => els;
      #record-read(term, "name") => name;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        fun goNext(ignored, next) = next()
        fun evaluate(n) =
          if #int-gt(n, 0) then
            #record-new("type", "CONS", "name", name, "args", copy) => newt;
            onSucceed(newt)
          else
            onFail()
      } in $strategyEvaluatorList(copy, strat, goNext, goNext, evaluate)
      
    // implementation of one(x)        
    fun $strategyOne(onSucceed, onFail, term, strat) =
      #record-read(term, "type") => type;
      if #str-eq(type, "LIST") then
        $strategyOneList(onSucceed, onFail, term, strat)
      else
        if #str-eq(type, "CONS") then
          $strategyOneCons(onSucceed, onFail, term, strat)
        else
          onFail()
          
    // one(x) for lists
    fun $strategyOneList(onSucceed, onFail, term, strat) =
      #record-read(term, "elements") => els;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        // continue
        fun onListFail(ignored, next) = next()
        
        // called only once
        fun onListSucceed(count, next) =
          #record-new("type", "LIST", "elements", copy) => newt;
          onSucceed(newt)
        
        // none matched
        fun onListFinish(ignored) = onFail()
      } in $strategyEvaluatorList(copy, strat, onListSucceed, onListFail, onListFinish)
      
    // one(x) for constructors
    fun $strategyOneCons(onSucceed, onFail, term, strat) =
      #record-read(term, "args") => els;
      #record-read(term, "name") => name;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        // continue
        fun onListFail(ignored, next) = next()
        
        // called only once
        fun onListSucceed(count, next) =
          #record-new("type", "CONS", "name", name, "args", copy) => newt;
          onSucceed(newt)
        
        // none matched
        fun onListFinish(ignored) = onFail()
      } in $strategyEvaluatorList(copy, strat, onListSucceed, onListFail, onListFinish)
      
    // implementation of all(x)        
    fun $strategyAll(onSucceed, onFail, term, strat) =
      #record-read(term, "type") => type;
      if #str-eq(type, "LIST") then
        $strategyAllList(onSucceed, onFail, term, strat)
      else
        if #str-eq(type, "CONS") then
          $strategyAllCons(onSucceed, onFail, term, strat)
        else
          onSucceed(term)
          
    // all(x) for lists
    fun $strategyAllList(onSucceed, onFail, term, strat) =
      #record-read(term, "elements") => els;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        // fail on failure
        fun onListFail(ignored, next) = onFail()
        
        // go next on success
        fun onListSucceed(count, next) = next()
        
        // once done, succeed
        fun onListFinish(ignored) = 
          #record-new("type", "LIST", "elements", copy) => newt;
          onSucceed(newt)
      } in $strategyEvaluatorList(copy, strat, onListSucceed, onListFail, onListFinish)
      
    // all(x) for constructors
    fun $strategyAllCons(onSucceed, onFail, term, strat) =
      #record-read(term, "args") => els;
      #record-read(term, "name") => name;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        // fail on failure
        fun onListFail(ignored, next) = onFail()
        
        // go next on success
        fun onListSucceed(count, next) = next()
        
        // once done, succeed
        fun onListFinish(ignored) = 
          #record-new("type", "CONS", "name", name, "args", copy) => newt;
          onSucceed(newt)
      } in $strategyEvaluatorList(copy, strat, onListSucceed, onListFail, onListFinish)
  } in hole
  
  primitive :: () -> Pluggable
  primitive() = @fix {
    fun PRIM_is_type(onSuccess, onFail, term, type) =
      #record-read(term, "type") => termt;
      #record-read(type, "value") => typet;
      if #str-eq(termt, typet) then
        onSuccess(term)
      else
        onFail()
    fun PRIM_prints(onSuccess, onFail, term) =
      #record-read(term, "type") => termt;
      if #str-eq(termt, "STRING") then
        #record-read(term, "value") => val;
        #print(val) => tmp0;
        onSuccess(term)
      else
        onFail()
    fun PRIM_addi(onSuccess, onFail, term) =
      #record-read(term, "args") => args;
      #array-read(args, 0) => i0t;
      #record-read(i0t, "value") => i0;
      #array-read(args, 1) => i1t;
      #record-read(i1t, "value") => i1;
      #int-add(i0, i1) => res;
      #record-new("type", "INT", "value", res) => out;
      onSuccess(out)
    fun PRIM_muli(onSuccess, onFail, term) =
      #record-read(term, "args") => args;
      #array-read(args, 0) => i0t;
      #record-read(i0t, "value") => i0;
      #array-read(args, 1) => i1t;
      #record-read(i1t, "value") => i1;
      #int-mul(i0, i1) => res;
      #record-new("type", "INT", "value", res) => out;
      onSuccess(out)
    fun PRIM_concat(onSuccess, onFail, term) =
      #record-read(term, "args") => args;
      #array-read(args, 0) => i0t;
      #record-read(i0t, "value") => i0;
      #array-read(args, 1) => i1t;
      #record-read(i1t, "value") => i1;
      #str-add(i0, i1) => res;
      #record-new("type", "STRING", "value", res) => out;
      onSuccess(out)
  } in hole

rules
  termEq :: @cval * @cval * @cval * @cval -> @cexp
  termEq(a, b, ifTrue, ifFalse) = var('"$termEq")@([a, b, ifTrue, ifFalse])
  
  termEqString :: @cval * @cval * @cval * @cval -> @cexp
  termEqString(a, b, ifTrue, ifFalse) = var('"$termEqString")@([a, b, ifTrue, ifFalse])
  
  termEqInt :: @cval * @cval * @cval * @cval -> @cexp
  termEqInt(a, b, ifTrue, ifFalse) = var('"$termEqInt")@([a, b, ifTrue, ifFalse])
  
  termEqCons :: @cval * @cval * @cval * @cval -> @cexp
  termEqCons(a, b, ifTrue, ifFalse) = var('"$termEqCons")@([a, b, ifTrue, ifFalse])