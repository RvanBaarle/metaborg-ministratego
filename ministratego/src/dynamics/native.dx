module dynamics/native

imports
  dynamics/stdlib

rules
  builtins :: () -> Pluggable
  builtins() = @
  typedef {
    Term = {type: string}
    ConsTerm = {extends Term, name: string, args: array<any>}
    ListTerm = {extends Term, elements: array<any>}
    StringTerm = {extends Term, value: string}
    IntTerm = {extends Term, value: int}
  } in
  fix {
    fun $toplevelSucceed(term) =
      #print("OK") => tmp0;
//      #print(term) => tmp1;
      #exit( )
    fun $toplevelFail( ) =
      #print("Fail") => tmp0;
      #exit( )
    fun $termEq<Term, Term, *, *>(a, b, ifTrue, ifFalse) =
      #struct-read(a, !type) => atype;
      #struct-read(b, !type) => btype;
      if #str-neq(atype, btype) then
        ifFalse()
      else
        if #str-eq(atype, "STRING") then
          #as-subtype<StringTerm>(a) => as;
          #as-subtype<StringTerm>(b) => bs;
          $termEqString(as, bs, ifTrue, ifFalse)
        else
          if #str-eq(atype, "INT") then
            #as-subtype<IntTerm>(a) => as;
            #as-subtype<IntTerm>(b) => bs;
            $termEqInt(as, bs, ifTrue, ifFalse)
          else
            if #str-eq(atype, "LIST") then
              #as-subtype<ListTerm>(a) => as;
              #as-subtype<ListTerm>(b) => bs;
              $termEqList(as, bs, ifTrue, ifFalse)
            else
              #as-subtype<ConsTerm>(a) => as;
              #as-subtype<ConsTerm>(b) => bs;
              $termEqCons(as, bs, ifTrue, ifFalse)
    fun $termEqString<StringTerm, StringTerm, *, *>(a, b, ifTrue, ifFalse) =
      #struct-read(a, !value) => avalue;
      #struct-read(b, !value) => bvalue;
      if #str-eq(avalue, bvalue) then
        ifTrue()
      else
        ifFalse()
    fun $termEqInt<IntTerm, IntTerm, *, *>(a, b, ifTrue, ifFalse) =
      #struct-read(a, !value) => avalue;
      #struct-read(b, !value) => bvalue;
      if #int-eq(avalue, bvalue) then
        ifTrue()
      else
        ifFalse()
    fun $termEqCons<ConsTerm, ConsTerm, *, *>(a, b, ifTrue, ifFalse) =
      #struct-read(a, !name) => aname;
      #struct-read(b, !name) => bname;
      if #str-neq(aname, bname) then
        ifFalse()
      else
        #struct-read(a, !args) => aargs;
        #struct-read(b, !args) => bargs;
        #array-length(aargs) => aarglen;
        #array-length(bargs) => barglen;
        if #int-eq(aarglen, barglen) then
          $termEqArray(aarglen, aargs, bargs, ifTrue, ifFalse)
        else
          ifFalse()
    fun $termEqList<ListTerm, ListTerm, *, *>(a, b, ifTrue, ifFalse) =
      #struct-read(a, !elements) => aargs;
      #struct-read(b, !elements) => bargs;
      #array-length(aargs) => aarglen;
      #array-length(bargs) => barglen;
      if #int-eq(aarglen, barglen) then
        $termEqArray(aarglen, aargs, bargs, ifTrue, ifFalse)
      else
        ifFalse()
    fun $termEqArray<int, array<any>, array<any>, *, *>(count, aargs, bargs, ifTrue, ifFalse) =
      if #int-eq(count, 0) then
        ifTrue()
      else
        #int-sub(count, 1) => i;
        fix {
          fun ifTrueRec() =
            $termEqArray(i, aargs, bargs, ifTrue, ifFalse)
        } in
          #array-read<Term>(aargs, i) => aval;
          #array-read<Term>(bargs, i) => bval;
          $termEq(aval, bval, ifTrueRec, ifFalse)   
                
    // evaluate `strat` on every element in list. For every element,
    // call onSucceed/onFail with the number of prior succeeded elements,
    // and a callback to continue evaluation. Call onFinish after finishing
    fun $strategyEvaluatorList<array<any>, *, *, *, *>(elements, strat, onSucceed, onFail, onFinish) =
      #array-length(elements) => len;
      fix {
        fun inner(i, succeeded) =
          if #int-eq(i, len) then
            onFinish(succeeded)
          else
            #int-add(i, 1) => inext;
            fix {
              fun runnextFail() = inner(inext, succeeded)
              fun runnextSucceed() =
                #int-add(succeeded, 1) => newsucc;
                inner(inext, newsucc)
            
              fun succeed(term) =
                #array-write<Term>(elements, i, term) => ignored;
                onSucceed(succeeded, runnextSucceed)
              
              fun fail() =
                onFail(succeeded, runnextFail)
            } in
              #array-read<Term>(elements, i) => el;
              strat(succeed, fail, el)
      } in
        inner(0, 0)
      
    // implementation of some(x)        
    fun $strategySome<*, *, Term, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !type) => type;
      if #str-eq(type, "LIST") then
        #as-subtype<ListTerm>(term) => term;
        $strategySomeList(onSucceed, onFail, term, strat)
      else
        if #str-eq(type, "CONS") then
          #as-subtype<ConsTerm>(term) => term;
          $strategySomeCons(onSucceed, onFail, term, strat)
        else
          onFail()
          
    // some(x) for lists
    fun $strategySomeList<*, *, ListTerm, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !elements) => els;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        fun goNext(ignored, next) = next()
        fun onFinish(n) =
          if #int-gt(n, 0) then
            #struct-new<ListTerm>() => newt;
            #struct-write(newt, !type, "LIST") => _;
            #struct-write(newt, !elements, copy) => _;
            #as-supertype<Term>(newt) => newtt;
            onSucceed(newtt)
          else
            onFail()
      } in $strategyEvaluatorList(copy, strat, goNext, goNext, onFinish)
      
    // some(x) for constructors
    fun $strategySomeCons<*, *, ConsTerm, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !args) => els;
      #struct-read(term, !name) => name;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        fun goNext(ignored, next) = next()
        fun evaluate(n) =
          if #int-gt(n, 0) then
            #struct-new<ConsTerm>() => newt;
            #struct-write(newt, !type, "CONS") => _;
            #struct-write(newt, !name, name) => _;
            #struct-write(newt, !args, copy) => _;
            #as-supertype<Term>(newt) => newtt;
            onSucceed(newtt)
          else
            onFail()
      } in $strategyEvaluatorList(copy, strat, goNext, goNext, evaluate)
      
    // implementation of one(x)        
    fun $strategyOne<*, *, Term, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !type) => type;
      if #str-eq(type, "LIST") then
        #as-subtype<ListTerm>(term) => term;
        $strategyOneList(onSucceed, onFail, term, strat)
      else
        if #str-eq(type, "CONS") then
          #as-subtype<ConsTerm>(term) => term;
          $strategyOneCons(onSucceed, onFail, term, strat)
        else
          onFail()
          
    // one(x) for lists
    fun $strategyOneList<*, *, ListTerm, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !elements) => els;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        // continue
        fun onListFail(ignored, next) = next()
        
        // called only once
        fun onListSucceed(count, next) =
          #struct-new<ListTerm>() => newt;
          #struct-write(newt, !type, "LIST") => _;
          #struct-write(newt, !elements, copy) => _;
          #as-supertype<Term>(newt) => newtt;
          onSucceed(newtt)
        
        // none matched
        fun onListFinish(ignored) = onFail()
      } in $strategyEvaluatorList(copy, strat, onListSucceed, onListFail, onListFinish)
      
    // one(x) for constructors
    fun $strategyOneCons<*, *, ConsTerm, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !args) => els;
      #struct-read(term, !name) => name;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        // continue
        fun onListFail(ignored, next) = next()
        
        // called only once
        fun onListSucceed(count, next) =
          #struct-new<ConsTerm>() => newt;
          #struct-write(newt, !type, "CONS") => _;
          #struct-write(newt, !name, name) => _;
          #struct-write(newt, !args, copy) => _;
          #as-supertype<Term>(newt) => newtt;
          onSucceed(newtt)
        
        // none matched
        fun onListFinish(ignored) = onFail()
      } in $strategyEvaluatorList(copy, strat, onListSucceed, onListFail, onListFinish)
      
    // implementation of all(x)        
    fun $strategyAll<*, *, Term, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !type) => type;
      if #str-eq(type, "LIST") then
        #as-subtype<ListTerm>(term) => term;
        $strategyAllList(onSucceed, onFail, term, strat)
      else
        if #str-eq(type, "CONS") then
          #as-subtype<ConsTerm>(term) => term;
          $strategyAllCons(onSucceed, onFail, term, strat)
        else
          onSucceed(term)
          
    // all(x) for lists
    fun $strategyAllList<*, *, ListTerm, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !elements) => els;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        // fail on failure
        fun onListFail(ignored, next) = onFail()
        
        // go next on success
        fun onListSucceed(count, next) = next()
        
        // once done, succeed
        fun onListFinish(ignored) = 
          #struct-new<ListTerm>() => newt;
          #struct-write(newt, !type, "LIST") => _;
          #struct-write(newt, !elements, copy) => _;
          #as-supertype<Term>(newt) => newtt;
          onSucceed(newtt)
      } in $strategyEvaluatorList(copy, strat, onListSucceed, onListFail, onListFinish)
      
    // all(x) for constructors
    fun $strategyAllCons<*, *, ConsTerm, *>(onSucceed, onFail, term, strat) =
      #struct-read(term, !args) => els;
      #struct-read(term, !name) => name;
      #array-new() => tmp0;
      #array-concat(els, tmp0) => copy;
      fix {
        // fail on failure
        fun onListFail(ignored, next) = onFail()
        
        // go next on success
        fun onListSucceed(count, next) = next()
        
        // once done, succeed
        fun onListFinish(ignored) = 
          #struct-new<ConsTerm>() => newt;
          #struct-write(newt, !type, "CONS") => _;
          #struct-write(newt, !name, name) => _;
          #struct-write(newt, !args, copy) => _;
          #as-supertype<Term>(newt) => newtt;
          onSucceed(newtt)
      } in $strategyEvaluatorList(copy, strat, onListSucceed, onListFail, onListFinish)
  } in hole
  
  primitive :: () -> Pluggable
  primitive() = @fix {
    fun PRIM_is_type<*, *, Term, Term>(onSuccess, onFail, term, type) =
      #struct-read(term, !type) => termt;
      #as-subtype<StringTerm>(type) => type;
      #struct-read(type, !value) => typet;
      if #str-eq(termt, typet) then
        onSuccess(term)
      else
        onFail()
    fun PRIM_prints<*, *, Term>(onSuccess, onFail, term) =
      #struct-read(term, !type) => termt;
      if #str-eq(termt, "STRING") then
        #as-subtype<StringTerm>(term) => term;
        #struct-read(term, !value) => val;
        #print(val) => tmp0;
        onSuccess(term)
      else
        onFail()
    fun PRIM_addi<*, *, Term>(onSuccess, onFail, term) =
      #as-subtype<ConsTerm>(term) => term;
      #struct-read(term, !args) => args;
      #array-read<IntTerm>(args, 0) => i0t;
      #struct-read(i0t, !value) => i0;
      #array-read<IntTerm>(args, 1) => i1t;
      #struct-read(i1t, !value) => i1;
      #int-add(i0, i1) => res;
      #struct-new<IntTerm>() => out;
      #struct-write(out, !type, "INT") => _;
      #struct-write(out, !value, res) => _;
      #as-supertype<Term>(out) => outt;
      onSuccess(outt)
    fun PRIM_muli<*, *, Term>(onSuccess, onFail, term) =
      #as-subtype<ConsTerm>(term) => term;
      #struct-read(term, !args) => args;
      #array-read<IntTerm>(args, 0) => i0t;
      #struct-read(i0t, !value) => i0;
      #array-read<IntTerm>(args, 1) => i1t;
      #struct-read(i1t, !value) => i1;
      #int-mul(i0, i1) => res;
      #struct-new<IntTerm>() => out;
      #struct-write(out, !type, "INT") => _;
      #struct-write(out, !value, res) => _;
      #as-supertype<Term>(out) => outt;
      onSuccess(outt)
    fun PRIM_concat<*, *, Term>(onSuccess, onFail, term) =
      #as-subtype<ConsTerm>(term) => term;
      #struct-read(term, !args) => args;
      #array-read<StringTerm>(args, 0) => i0t;
      #struct-read(i0t, !value) => i0;
      #array-read<StringTerm>(args, 1) => i1t;
      #struct-read(i1t, !value) => i1;
      #str-add(i0, i1) => res;
      #struct-new<StringTerm>() => out;
      #struct-write(out, !type, "STRING") => _;
      #struct-write(out, !value, res) => _;
      #as-supertype<Term>(out) => outt;
      onSuccess(outt)
  } in hole

rules
  termEq :: @cval * @cval * @cval * @cval -> @cexp
  termEq(a, b, ifTrue, ifFalse) = var('"$termEq")@([a, b, ifTrue, ifFalse])
  
  termEqString :: @cval * @cval * @cval * @cval -> @cexp
  termEqString(a, b, ifTrue, ifFalse) = var('"$termEqString")@([a, b, ifTrue, ifFalse])
  
  termEqInt :: @cval * @cval * @cval * @cval -> @cexp
  termEqInt(a, b, ifTrue, ifFalse) = var('"$termEqInt")@([a, b, ifTrue, ifFalse])
  
  termEqCons :: @cval * @cval * @cval * @cval -> @cexp
  termEqCons(a, b, ifTrue, ifFalse) = var('"$termEqCons")@([a, b, ifTrue, ifFalse])