module dynamics/data

imports
  dynamics/stdlib
  
  signatures/entry-sig
  
// term representation
rules
  termStr :: @cval -> Pluggable(@cval)
  termStr(x) = {
    t <- #struct-new<typevar('"StringTerm")>()
    #struct-write(t, symbol('"type"), str('"STRING"))
    #struct-write(t, symbol('"value"), x)
    #as-supertype<typevar('"Term")>(t)
  }
  
  termInt :: @cval -> Pluggable(@cval)
  termInt(x) = {
    t <- #struct-new<typevar('"IntTerm")>()
    #struct-write(t, symbol('"type"), str('"INT"))
    #struct-write(t, symbol('"value"), x)
    #as-supertype<typevar('"Term")>(t)
  }
  
  termCons :: @cval * @cval -> Pluggable(@cval)
  termCons(name, args) = {
    t <- #struct-new<typevar('"ConsTerm")>()
    #struct-write(t, symbol('"type"), str('"CONS"))
    #struct-write(t, symbol('"name"), name)
    #struct-write(t, symbol('"args"), args)
    #as-supertype<typevar('"Term")>(t)
  }
  
  termList :: @cval -> Pluggable(@cval)
  termList(els) = {
    t <- #struct-new<typevar('"ListTerm")>()
    #struct-write(t, symbol('"type"), str('"LIST"))
    #struct-write(t, symbol('"elements"), els)
    #as-supertype<typevar('"Term")>(t)
  }
  
// conditionals
rules
  isType :: 'string * @cval * @cval * @cval -> @cexp
  isType(ty, val, ifTrue, ifFalse) = {
    type <- #struct-read(val, symbol('"type"))
    if #str-eq(type, str(ty)) then {
      ifTrue@([])
    } else {
      ifFalse@([])
    }
  }

  isTermString :: @cval * @cval * @cval -> @cexp
  isTermString(val, ifTrue, ifFalse) = isType('"STRING", val, ifTrue, ifFalse)
  
  isTermInt :: @cval * @cval * @cval -> @cexp
  isTermInt(val, ifTrue, ifFalse) = isType('"INT", val, ifTrue, ifFalse)
  
  isTermCons :: @cval * @cval * @cval -> @cexp
  isTermCons(val, ifTrue, ifFalse) = isType('"CONS", val, ifTrue, ifFalse)
  
  isTermConsWithName :: @cval * @cval * @cval * @cval -> @cexp
  isTermConsWithName(val, name, ifTrue, ifFalse) = {
    isTermCons(val, after, ifFalse) label after/0:
    valt <- #as-subtype<typevar('"ConsTerm")>(val)
    cons <- #struct-read(valt, symbol('"name"))
    if #str-eq(cons, name) then { 
      ifTrue@([])
    } else {
      ifFalse@([])
    }
  }
  
  isTermList :: @cval * @cval * @cval -> @cexp
  isTermList(val, ifTrue, ifFalse) = isType('"LIST", val, ifTrue, ifFalse)