module dynamics/main

imports
  dynamics/native
  dynamics/stdlib
  
  dynamics/strategies
  dynamics/data
  dynamics/scope
  
constraint-analyzer
  property refType :: 'string
  
rules
  $succeed :: Pluggable(@cval) // (term: Term)
  $fail :: Pluggable(@cval) // ()
  $frame :: @cval
  $frameT :: @ctype

  compileModule :: 'Module -> Pluggable
  compileModule(Module(_, decls)) = {
    builtins()
    primitive()
    frameT <- compileFrameType(fresh-typevar(frame), [], [])
    frame <- #struct-new<frameT>()
    with $frame = frame, $frameT = frameT do {
      declFuns <- compileDecls(decls)
      fix { declFuns }
    
      term <- termStr(str('""))
      var('"main")@([var('"$toplevelSucceed"), var('"$toplevelFail"), term])
    }
  }
  
  compileDecls :: List('Decl) -> Pluggable(List(@cfun))
  compileDecls([]) = []
  compileDecls([Strategies(strats)|rest]) = {
    defs <- compileStrategyDefs(strats)
    rests <- compileDecls(rest)
    defs ++ rests
  }